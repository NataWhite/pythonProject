# прога, що виводить кількість кожного символа з введеної строки,
# наприклад:
# st = 'as 23 fdfdg544'  # введена строка
#
# 'a' -> 1  # вивело в консолі
# 's' -> 1
# ' ' -> 2
# '2' -> 1
# '3' -> 1
# 'f' -> 2
# 'd' -> 2
# 'g' -> 1
# '5' -> 1
# '4' -> 2

st = 'as 23 fdfdg544'

# def counter_of_symbols(string):
#     count_dict = {}
#     for item in string:
#         if item not in count_dict:
#             count_dict[item] = 1
#         else:
#             count_dict[item] += 1
#     for k, v in count_dict.items():
#         print(f"'{k}' -> {v}")
#
#
# counter_of_symbols(st)

#############################################################

# генерируем лист с непарных чисел в порядке возрастания [1,3,5,7,9.....n]
# задача сделать c него лист листов такого плана:
#
# [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]  => [ [1], [3,5], [7,9,11], [13,15,17,19] ]
# [1, 3, 5, 7, 9, 11] => [[1], [3, 5], [7, 9, 11]]
# [1, 3, 5, 7, 9]  => [ [1], [3,5], [7,9]]
# [1, 3, 5, 7, 9, 11, 13]  => [[1], [3, 5], [7, 9, 11], [13]]

# arr1 = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]
# arr2 = [1, 3, 5, 7, 9, 11]
# arr3 = [1, 3, 5, 7, 9, 11, 13]
#
#
# def generator_list(arr):
#     i = 1
#     new_list = []
#     while len(arr):
#         new_list.append(arr[:i])
#         del arr[:i]
#         i += 1
#     print(new_list)
#
#
# generator_list(arr1)
# generator_list(arr2)
# generator_list(arr3)

#####################################################################
# Дан массив целых чисел, найдите тот, который встречается нечетное количество раз.
# // Всегда будет только одно целое число, которое встречается нечетное количество раз
# //     [1,2,3,4,5,2,4,1,3] -> 5

# def find_numb(arr):
#     new_dict = {}
#     for item in arr:
#         if item not in new_dict:
#             new_dict[item] = 1
#         else:
#             new_dict[item] += 1
#     for k, v in new_dict.items():
#         if v % 2 == 1:
#             print(f'{arr} -> {k}')
#
#
# list_n = [1, 2, 3, 4, 5, 2, 4, 1, 3]
# find_numb(list_n)

###############################################

#  Точная степень двойки
# // Дано натуральное число N.
# //     Выведите слово YES, если число N является точной степенью двойки, или слово NO в противном случае.
# //     Операцией возведения в степень пользоваться нельзя!

# n = int(input())
# i = 1
#
# while i < n:
#     i = i * 2
# if i == n:
#     print("YES")
# else:
#     print("NO")

#############

# def two(numb):
#     m = numb / 2
#     if m == 2:
#         print('YES')
#     if numb % 2 == 0 and numb > 2:
#         return two(m)
#     if not numb % 2 == 0:
#         print('NO')
#
#
# two(78)

###################################################################
# Палиндром
# // Дано слово, состоящее только из строчных латинских букв. Проверьте, является ли это слово палиндромом.
# Выведите YES или NO.
# //     При решении этой задачи нельзя пользоваться циклами,
# в решениях на питоне нельзя использовать срезы с шагом, отличным от 1.

# def pld(word):
#     if word == ''.join(reversed(word)):
#         print('YES')
#     else:
#         print('NO')
#
#
# pld('good')
# pld('abcba')

##############
# palindrome = input('write word: ').lower()
# print('YES' if palindrome == palindrome[::-1] else 'NO')

####################################################################
#  Вирівняти багаторівневий масив в однорівневий
# //     [1,3, ['Hello, 'Wordd', [9,6,1]], ['oops'], 9] -> [1, 3, 'Hello, 'Wordd', 9, 6, 1, 'oops', 9]
# // flat використовувати заборонено.

# arr = [1, 3, ['Hello', 'Wordd', [9, 6, 1]], ['oops'], 9]
#
# n_list = []
#
#
# def flat_arr(ls):
#     for item in ls:
#         if not type(item) == list:
#             n_list.append(item)
#         else:
#             flat_arr(item)
#
#
# flat_arr(arr)
# print(n_list)
